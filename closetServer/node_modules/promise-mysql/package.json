{
  "_from": "promise-mysql",
  "_id": "promise-mysql@4.1.1",
  "_inBundle": false,
  "_integrity": "sha512-Sw3ANQ3f/n3b0yTX0Adr7Z837Qj9JUr/TnEJv168cNe8Jx95HdNpD1s+2pS35YHTIwngGM48nwCpWDrnyIXPlQ==",
  "_location": "/promise-mysql",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "promise-mysql",
    "fetchSpec": "latest",
    "name": "promise-mysql",
    "raw": "promise-mysql",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/promise-mysql/-/promise-mysql-4.1.1.tgz",
  "_shasum": "374d7e5789588c392faee09d5520b065609327d5",
  "_shrinkwrap": null,
  "_spec": "promise-mysql",
  "_where": "C:\\Users\\beeny\\Desktop\\capston\\closetServer\\routes\\user",
  "author": {
    "name": "Luke Bonaccorsi"
  },
  "bugs": {
    "url": "https://github.com/lukeb-uk/node-promise-mysql/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "@types/bluebird": "^3.5.26",
    "@types/mysql": "^2.15.2",
    "bluebird": "^3.5.1",
    "mysql": "^2.17.1"
  },
  "deprecated": false,
  "description": "A bluebird wrapper for node-mysql",
  "devDependencies": {
    "proxyquire": "^2.0.1",
    "sinon": "^7.5.0",
    "tap": "^14.4.1"
  },
  "homepage": "https://github.com/lukeb-uk/node-promise-mysql#readme",
  "keywords": [
    "async",
    "await",
    "bluebird",
    "database",
    "deferred",
    "deferreds",
    "dsl",
    "flow control",
    "fluent interface",
    "future",
    "mysql",
    "mysql-promise",
    "performance",
    "promise",
    "promises",
    "promises-a",
    "promises-aplus",
    "q"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "promise-mysql",
  "optionalDependencies": {},
  "readme": "Promise-mysql\n==================\n[![Build Status](https://travis-ci.org/lukeb-uk/node-promise-mysql.svg?style=flat&branch=master)](https://travis-ci.org/lukeb-uk/node-promise-mysql?branch=master)\n[![Greenkeeper badge](https://badges.greenkeeper.io/lukeb-uk/node-promise-mysql.svg)](https://greenkeeper.io/)\n\nPromise-mysql is a wrapper for [mysqljs/mysql](https://github.com/mysqljs/mysql) that wraps function calls with [Bluebird](https://github.com/petkaantonov/bluebird/) promises.\n\n## API\n\n### mysql.createConnection(connectionOptions)\nThis will return a the promise of a [connection](#connection) object.\n\n#### Parameters\n`connectionOptions` _object_: A [connectionOptions](#connectionOptions) object\n\n#### Return value\nA Bluebird `Promise` that resolves to a [connection](#connection) object\n\n### mysql.createPool(connectionOptions)\nThis will return a the promise of a [pool](#pool) object.\n\n#### Parameters\n`connectionOptions` _object_: A [connectionOptions](#connectionOptions) object\n\n#### Return value\nA Bluebird `Promise` that resolves to a [pool](#pool) object\n\n### connectionOptions object\n\nIn addition to the [connection options in mysqljs/mysql](https://github.com/mysqljs/mysql#connection-options), promise-mysql accepts the following:\n\n`returnArgumentsArray` _boolean_: If set to true then methods will return an array with the callback arguments from the underlying method (excluding the any errors) and the return value from the call.\n\n`mysqlWrapper` _function_: A function that is passed the `mysql` object so that it can be wrapped with something like the [aws-xray-sdk module](https://www.npmjs.com/package/aws-xray-sdk). This function must either return the wrapped `mysql` object, return a promise of the wrapped `mysql` object or call the callback that is passed into the function.\n\n`reconnect` _boolean_ (default: true): If set to true then the connection will reconnect on the `PROTOCOL_CONNECTION_LOST`, `ECONNRESET` and `PROTOCOL_ENQUEUE_AFTER_FATAL_ERROR` errors.\n\n#### Function arguments\n\n`mysql` _mysql object_: The mysql object\n\n`callback(error, success)` _function_: A node-style callback that can be used to pass the wrapped version of the mysql object out of the wrapper function.\n\n### Connection object methods\n\n`connection.query`: Perform a query. See [mysqljs/mysql documentation](https://github.com/mysqljs/mysql#performing-queries)\n\n`connection.queryStream`: Perform a query, but return the query object for streaming. See [mysqljs/mysql documentation](https://github.com/mysqljs/mysql#streaming-query-rows)\n\n`connection.beginTransaction`: Begin a transaction. See [mysqljs/mysql documentation](https://github.com/mysqljs/mysql#transactions)\n\n`connection.commit`: Commit a transaction. See [mysqljs/mysql documentation](https://github.com/mysqljs/mysql#transactions)\n\n`connection.rollback`: Roll back a transaction. See [mysqljs/mysql documentation](https://github.com/mysqljs/mysql#transactions)\n\n`connection.changeUser`: Change the current connected user. See [mysqljs/mysql documentation](https://github.com/mysqljs/mysql#switching-users-and-altering-connection-state)\n\n`connection.ping`: Send a ping to the server. See [mysqljs/mysql documentation](https://github.com/mysqljs/mysql#ping)\n\n`connection.end`: End the connection. See [mysqljs/mysql documentation](https://github.com/mysqljs/mysql#terminating-connections)\n\n`connection.destroy`: Destroy the connection. See [mysqljs/mysql documentation](https://github.com/mysqljs/mysql#terminating-connections)\n\n`connection.pause`: Pause a connection. See [mysqljs/mysql documentation](https://github.com/mysqljs/mysql#streaming-query-rows)\n\n`connection.resume`: Resume a connection. See [mysqljs/mysql documentation](https://github.com/mysqljs/mysql#streaming-query-rows)\n\n`connection.escape`: Escape query values. See [mysqljs/mysql documentation](https://github.com/mysqljs/mysql#escaping-query-values)\n\n`connection.escapeId`: Escape query identifiers. See [mysqljs/mysql documentation](https://github.com/mysqljs/mysql#escaping-query-identifiers)\n\n`connection.format`: Prepare a query. See [mysqljs/mysql documentation](https://github.com/mysqljs/mysql#preparing-queries)\n\n`connection.on`: Add a listener to the connection object. See [mysqljs/mysql documentation](https://github.com/mysqljs/mysql) for events that may be listened for.\n\n### Pool object methods\n\n`pool.getConnection`: Get a connection from the pool. See [mysqljs/mysql documentation](https://github.com/mysqljs/mysql#pooling-connections)\n\n`pool.releaseConnection`: Release a connection back into the pool. See [mysqljs/mysql documentation](https://github.com/mysqljs/mysql#pooling-connections)\n\n`pool.query`: Get a connection from the pool, run a query and then release it back into the pool. See [mysqljs/mysql documentation](https://github.com/mysqljs/mysql#pooling-connections)\n\n`pool.end`: End all the connections in a pool. See [mysqljs/mysql documentation](https://github.com/mysqljs/mysql#closing-all-the-connections-in-a-pool)\n\n`pool.escape`: Escape query values. See [mysqljs/mysql documentation](https://github.com/mysqljs/mysql#escaping-query-values)\n\n`pool.escapeId`: Escape query identifiers. See [mysqljs/mysql documentation](https://github.com/mysqljs/mysql#escaping-query-identifiers)\n\n`pool.on`: Add a listener to the connection object. See [mysqljs/mysql documentation](https://github.com/mysqljs/mysql#pool-events) for events that may be listened for.\n\n## Upgrading from v3\nThe main difference is that `mysql.createPool` now returns a promise. Besides this, the API is the same and you should be able to upgrade straight to v4. The only other difference is the extra options in the [connectionOptions object](#connectionoptions-object).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/lukeb-uk/node-promise-mysql.git"
  },
  "scripts": {
    "coverage": "tap test/*.js --coverage-report=html",
    "tap": "tap",
    "test": "tap test/*.js --100",
    "updatesnapshots": "TAP_SNAPSHOT=1 npm run test"
  },
  "version": "4.1.1"
}
